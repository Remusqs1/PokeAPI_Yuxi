{"version":3,"sources":["./src/app/Administration/Components/Authentication/Components/Login/login.component.html","./src/app/Administration/Components/Authentication/Components/Register/register.component.html","./src/app/Administration/Components/Authentication/Components/Login/login.component.css","./src/app/Administration/Components/Authentication/Components/Login/login.component.ts","./src/app/Administration/Components/Authentication/Components/Register/register.component.ts","./src/app/Administration/Components/Authentication/Services/authentication.form.service.ts","./src/app/Administration/Components/Authentication/authentication.module.ts","./src/app/Administration/Components/Authentication/authentication.routing.ts","./src/app/Commons/Classes/customValidators.ts","./src/app/Commons/Entities/user.ts"],"names":[],"mappings":"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","file":"0-es2015.js","sourcesContent":["export default \"<div class=\\\"login-register\\\">\\r\\n  <div class=\\\"login-box\\\">\\r\\n    <div class=\\\"card login-box-shadow\\\">\\r\\n      <div class=\\\"card-header rounded-top\\\">\\r\\n        <div class=\\\"image-container text-center\\\">\\r\\n          <img src=\\\"https://teams.sourceseek.com/logos/profile/limage-4505-104-photo.jpg\\\" alt=\\\"loginPage\\\" class=\\\"logo\\\" />\\r\\n        </div>\\r\\n        <h1 class=\\\"text-themecolor font-weight-bold text-center mt-1\\\">\\r\\n          PokeAPI Login\\r\\n        </h1>\\r\\n      </div>\\r\\n      <div class=\\\"card-body rounded-bottom\\\" style=\\\"padding-bottom: 0\\\">\\r\\n        <form class=\\\"form-horizontal form-material\\\" id=\\\"loginform\\\" [formGroup]=\\\"loginForm\\\" >\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"\\\">Email</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" required=\\\"\\\"\\r\\n                placeholder=\\\"Email\\\" id=\\\"email\\\" formControlName=\\\"email\\\"\\r\\n                name=\\\"email\\\" [ngClass]=\\\"{'has-error': (hasError && loginForm.controls['email'].errors) || (loginForm.controls['email'].errors && (loginForm.controls['email'].dirty ||\\r\\n                                                loginForm.controls['email'].touched)) }\\\" />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && loginForm.controls['email'].errors) || (loginForm.controls['email'].errors && (loginForm.controls['email'].dirty || loginForm.controls['email'].touched))\\\">\\r\\n                <span *ngIf=\\\"loginForm.controls['email'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n                <span *ngIf=\\\"loginForm.controls['email'].errors.requiredEmailFormat\\\">El campo debe ser un correo v√°lido</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <label for=\\\"\\\">{{ 'administration.authentication.login.label.psw' | translate }}</label>\\r\\n              <input class=\\\"form-control\\\" type=\\\"password\\\" required=\\\"\\\" (keyup.enter)=\\\"onLoggedIn()\\\"\\r\\n                placeholder=\\\"{{ 'administration.authentication.login.label.psw' | translate }}\\\"\\r\\n                id=\\\"password\\\" formControlName=\\\"psw\\\" name=\\\"psw\\\"\\r\\n                [ngClass]=\\\"{\\r\\n                  'has-error':\\r\\n                    (hasError && loginForm.controls['psw'].errors) || (loginForm.controls['psw'].errors &&\\r\\n                      (loginForm.controls['psw'].dirty ||\\r\\n                        loginForm.controls['psw'].touched))\\r\\n                }\\\"\\r\\n              />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && loginForm.controls['psw'].errors) ||\\r\\n                                (loginForm.controls['psw'].errors && (loginForm.controls['psw'].dirty ||\\r\\n                                    loginForm.controls['psw'].touched)) \\\">\\r\\n                <span *ngIf=\\\"loginForm.controls['psw'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-xs-12\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-yuxi btn-block text-capitalize\\\" (click)=\\\"onLoggedIn()\\\">\\r\\n              {{ 'administration.authentication.login.label.signIn' | translate }}\\r\\n            </button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-yuxi btn-block text-capitalize\\\" (click)=\\\"goRegister()\\\">\\r\\n              {{ 'administration.authentication.login.label.register' | translate }}\\r\\n            </button>\\r\\n          </div>\\r\\n          <div class=\\\"col-xs-12 m-t-10\\\"></div>\\r\\n\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"login-register\\\">\\r\\n  <div class=\\\"login-box\\\">\\r\\n    <div class=\\\"card login-box-shadow\\\">\\r\\n      <div class=\\\"card-header rounded-top\\\">\\r\\n        <div class=\\\"image-container text-center\\\">\\r\\n          <img src=\\\"https://teams.sourceseek.com/logos/profile/limage-4505-104-photo.jpg\\\" alt=\\\"loginPage\\\" class=\\\"logo\\\" />\\r\\n        </div>\\r\\n        <h1 class=\\\"text-themecolor font-weight-bold text-center mt-1\\\">\\r\\n          {{ 'administration.authentication.register.label.title' | translate }}\\r\\n        </h1>\\r\\n      </div>\\r\\n      <div class=\\\"card-body rounded-bottom\\\">\\r\\n        <form class=\\\"form-horizontal form-material\\\" id=\\\"registerForm\\\" [formGroup]=\\\"registerForm\\\" >\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">{{ 'administration.authentication.register.label.name' | translate}}</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"{{ 'administration.authentication.register.label.name' | translate }}\\\" id=\\\"name\\\" formControlName=\\\"name\\\"\\r\\n                name=\\\"name\\\" [ngClass]=\\\"{'has-error': (hasError && registerForm.controls['name'].errors) || (registerForm.controls['name'].errors && (registerForm.controls['name'].dirty || registerForm.controls['name'].touched)) }\\\" />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && registerForm.controls['name'].errors) || (registerForm.controls['name'].errors && (registerForm.controls['name'].dirty || registerForm.controls['name'].touched))\\\">\\r\\n                <span *ngIf=\\\"registerForm.controls['name'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"email\\\">{{ 'general.email.label' | translate}}</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"{{ 'general.email.label' | translate }}\\\" id=\\\"email\\\" formControlName=\\\"email\\\"\\r\\n                email=\\\"email\\\" [ngClass]=\\\"{'has-error': (hasError && registerForm.controls['email'].errors) || (registerForm.controls['email'].errors && (registerForm.controls['email'].dirty || registerForm.controls['email'].touched)) }\\\"\\r\\n              />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && registerForm.controls['email'].errors) || (registerForm.controls['email'].errors && (registerForm.controls['email'].dirty || registerForm.controls['email'].touched))\\\">\\r\\n                <span *ngIf=\\\"registerForm.controls['email'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          \\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"psw\\\">{{ 'administration.authentication.register.label.psw' | translate}}</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"password\\\" placeholder=\\\"{{ 'administration.authentication.register.label.psw' | translate }}\\\" id=\\\"psw\\\" formControlName=\\\"psw\\\"\\r\\n                psw=\\\"psw\\\" [ngClass]=\\\"{'has-error': (hasError && registerForm.controls['psw'].errors) || (registerForm.controls['psw'].errors && (registerForm.controls['psw'].dirty || registerForm.controls['psw'].touched)) || invalidPasswordCharacters }\\\" />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && registerForm.controls['psw'].errors) || (registerForm.controls['psw'].errors && (registerForm.controls['psw'].dirty || registerForm.controls['psw'].touched))\\\">\\r\\n                <span *ngIf=\\\"registerForm.controls['psw'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n                \\r\\n              </div>\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\"invalidPasswordCharacters\\\">\\r\\n                <span>\\r\\n                  Debe contener al menos:  1 car√°cter num√©rico, 2 caracteres alfab√©ticos, 1 letra may√∫scula, 1 letra min√∫scula, 1 car√°cter especial y una longitud m√≠nima de 8 caracteres\\\",\\r\\n                </span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"psw\\\">Confirmaci√≥n de contrase√±a</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"password\\\" placeholder=\\\"Confirmaci√≥n de contrase√±a\\\" id=\\\"confirmPsw\\\" formControlName=\\\"confirmPsw\\\"\\r\\n                confirmPsw=\\\"confirmPsw\\\" [ngClass]=\\\"{'has-error': (hasError && registerForm.controls['confirmPsw'].errors) || (registerForm.controls['confirmPsw'].errors && (registerForm.controls['confirmPsw'].dirty || registerForm.controls['confirmPsw'].touched)) }\\\" />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && registerForm.controls['confirmPsw'].errors) || (registerForm.controls['confirmPsw'].errors && (registerForm.controls['confirmPsw'].dirty || registerForm.controls['confirmPsw'].touched))\\\">\\r\\n                <span *ngIf=\\\"registerForm.controls['confirmPsw'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n                <span *ngIf=\\\"registerForm.controls['confirmPsw'].errors.comparePswError\\\">Las contrase√±as no coinciden</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-xs-12\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-yuxi btn-block text-uppercase\\\" (click)=\\\"register()\\\">\\r\\n              {{ 'administration.authentication.register.button.register' | translate }}\\r\\n            </button>\\r\\n\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-yuxi btn-block text-uppercase\\\" (click)=\\\"goLogin()\\\">\\r\\n              Cancelar\\r\\n            </button>\\r\\n\\r\\n          </div> \\r\\n          \\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \".login-box-shadow {\\r\\n  border-radius: 10px 10px 10px 10px;\\r\\n  box-shadow: 0 30px 60px 0 rgba(0, 0, 0, 0.3);\\r\\n}\\r\\n.image-container {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQWRtaW5pc3RyYXRpb24vQ29tcG9uZW50cy9BdXRoZW50aWNhdGlvbi9Db21wb25lbnRzL0xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxrQ0FBa0M7RUFFbEMsNENBQTRDO0FBQzlDO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0FBQ3pCIiwiZmlsZSI6InNyYy9hcHAvQWRtaW5pc3RyYXRpb24vQ29tcG9uZW50cy9BdXRoZW50aWNhdGlvbi9Db21wb25lbnRzL0xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4tYm94LXNoYWRvdyB7XHJcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMHB4IDEwcHggMTBweCAxMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDEwcHggMTBweCAxMHB4IDEwcHg7XHJcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDMwcHggNjBweCAwIHJnYmEoMCwgMCwgMCwgMC4zKTtcclxuICBib3gtc2hhZG93OiAwIDMwcHggNjBweCAwIHJnYmEoMCwgMCwgMCwgMC4zKTtcclxufVxyXG4uaW1hZ2UtY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { AuthenticationFormService } from '../../Services/authentication.form.service';\r\nimport { User } from '../../../../../Commons/Entities/user';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  loginForm: FormGroup;\r\n  hasError = false;\r\n  showLoader = false;\r\n\r\n  constructor(\r\n    private authenticationFormService: AuthenticationFormService,\r\n    private routes: Router,) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.authenticationFormService.getLoginForm();\r\n  }\r\n\r\n\r\n  onLoggedIn() {\r\n    this.hasError = false;\r\n    this.showLoader = true;\r\n    if (this.loginForm.valid) {\r\n        //LocalStorage\r\n        let user = new User();\r\n        user.usr_email = this.loginForm.get(\"email\").value;\r\n        let userJson = JSON.stringify(user);\r\n        localStorage.setItem(\"user\", userJson);\r\n        \r\n        this.goDashboard();\r\n    } else {\r\n        this.hasError = true;\r\n        this.showLoader = false;\r\n      }\r\n  }\r\n\r\n  goDashboard() {\r\n    this.routes.navigate(['Home']);\r\n  }\r\n\r\n  goRegister() {\r\n    this.routes.navigate(['Register']);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../../../../../Commons/Entities/user';\r\nimport { AuthenticationFormService } from '../../Services/authentication.form.service';\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html'\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n\r\n    registerForm: FormGroup;\r\n    hasError = false;\r\n    showLoader = false;\r\n    regex = (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\\W).{8,18}$/); //1 may√∫scula, 1 minuscula, 1 n√∫mero, 1 caracter especial, entre 8 y 18 de longitud\r\n    invalidPasswordCharacters = false;\r\n    \r\n    constructor(private authenticationFormService: AuthenticationFormService,\r\n                private routes: Router) { }\r\n\r\n    ngOnInit() {\r\n        this.registerForm = this.authenticationFormService.getRegisterForm();\r\n\r\n        this.registerForm.get('confirmPsw').valueChanges.subscribe(value => {\r\n            this.comparePasswords();\r\n        });\r\n        this.registerForm.get('psw').valueChanges.subscribe(value => {\r\n            this.comparePasswords();\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.invalidPasswordCharacters = false;\r\n        this.registerForm.get('psw').valueChanges.subscribe(value => {\r\n            if (this.regex.test(value)) {\r\n                this.invalidPasswordCharacters = false;\r\n            }\r\n            else {\r\n                this.invalidPasswordCharacters = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    register() {\r\n        this.hasError = false;\r\n        if (this.registerForm.valid) {\r\n\r\n            //LocalStorage\r\n            let user = new User();\r\n            user.usr_userName = this.registerForm.get(\"name\").value;\r\n            user.usr_email = this.registerForm.get(\"email\").value;\r\n            let userJson = JSON.stringify(user);\r\n            localStorage.setItem(\"user\", userJson);\r\n            this.routes.navigate(['Home']);\r\n        }\r\n        else {\r\n            this.hasError = true;\r\n        }\r\n    }\r\n\r\n    goLogin() {\r\n        this.routes.navigate(['']);\r\n    }\r\n\r\n    comparePasswords() {\r\n        if (this.registerForm.get('confirmPsw').value === this.registerForm.get('psw').value) {\r\n            this.registerForm.get('confirmPsw').setErrors(null);\r\n        }\r\n        else {\r\n            this.registerForm.get('confirmPsw').setErrors({ 'comparePswError': true });\r\n        }\r\n    }\r\n\r\n}","import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Injectable } from '@angular/core';\r\nimport { CustomValidators } from '../../../../Commons/Classes/customValidators';\r\n\r\n@Injectable()\r\nexport class AuthenticationFormService {\r\n  \r\n  constructor(private formBuilder: FormBuilder) { }\r\n\r\n  getLoginForm(): FormGroup {\r\n    return this.formBuilder.group({\r\n      email: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty, CustomValidators.EmailFormat]],\r\n      psw: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty]]\r\n    });\r\n  }\r\n\r\n  getRegisterForm(): FormGroup {\r\n    return this.formBuilder.group({\r\n      name: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty]],\r\n      email: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty, CustomValidators.EmailFormat]],\r\n      psw: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty]],\r\n      confirmPsw: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty]]\r\n    });\r\n  }\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { LoginComponent } from './Components/Login/login.component';\r\nimport { AUTHENTICATION_ROUTES } from './authentication.routing';\r\nimport { AuthenticationFormService } from './Services/authentication.form.service';\r\nimport { RegisterComponent } from './Components/Register/register.component';\r\nimport { SharedModule } from '../../../Shared/shared.module';\r\nimport { CommonService } from '../../../Commons/Services/common.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AUTHENTICATION_ROUTES,\r\n    NgbModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ],\r\n  exports: [\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ],\r\n  providers: [\r\n    AuthenticationFormService,\r\n    CommonService\r\n  ]\r\n})\r\n\r\nexport class AuthenticationModule { }\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './Components/Login/login.component';\r\nimport { RegisterComponent } from './Components/Register/register.component';\r\n\r\nconst AuthenticationRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: 'Register',\r\n    component: RegisterComponent\r\n  }\r\n];\r\n\r\nexport const AUTHENTICATION_ROUTES = RouterModule.forChild(AuthenticationRoutes);\r\n","import { AbstractControl, ValidatorFn, ValidationErrors } from '@angular/forms';\r\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\r\nimport { isNumber } from 'util';\r\n\r\nexport class CustomValidators {\r\n\r\n  static IsNullorEmpty(control: AbstractControl) {\r\n    if (\r\n      control.value === null ||\r\n      control.value === undefined ||\r\n      control.value === 'undefined' ||\r\n      control.value === ''\r\n    ) {\r\n      // control.setValue(undefined);\r\n      return { required: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static EmailFormat(control: AbstractControl) {\r\n    if (control.value === null || control.value === undefined || control.value === '') {\r\n      return null;\r\n    }\r\n    if (!(/(([^<>()[\\]\\.,;:\\s@\\']+(\\.[^<>()[\\]\\.,;:\\s@\\']+)*)|(\\'.+\\'))@(([^<>()[\\]\\.,;:\\s@\\']+\\.)+[^<>()[\\]\\.,;:\\s@\\']{2,})$/\r\n      .test(control.value))) {\r\n      return { requiredEmailFormat: true };\r\n    }\r\n  }\r\n\r\n}\r\n","export class User  {\r\n\r\n  public usr_userName: string;\r\n  public usr_email: string;\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}
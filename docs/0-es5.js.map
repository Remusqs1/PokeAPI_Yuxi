{"version":3,"sources":["src/app/Administration/Components/Authentication/Components/Login/login.component.html","src/app/Administration/Components/Authentication/Components/Register/register.component.html","src/app/Administration/Components/Authentication/Components/Login/login.component.css","src/app/Administration/Components/Authentication/Components/Login/login.component.ts","src/app/Administration/Components/Authentication/Components/Register/register.component.ts","src/app/Administration/Components/Authentication/Services/authentication.form.service.ts","src/app/Administration/Components/Authentication/authentication.module.ts","src/app/Administration/Components/Authentication/authentication.routing.ts","src/app/Commons/Classes/customValidators.ts","src/app/Commons/Entities/user.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"login-register\\\">\\r\\n  <div class=\\\"login-box\\\">\\r\\n    <div class=\\\"card login-box-shadow\\\">\\r\\n      <div class=\\\"card-header rounded-top\\\">\\r\\n        <div class=\\\"image-container text-center\\\">\\r\\n          <img src=\\\"https://teams.sourceseek.com/logos/profile/limage-4505-104-photo.jpg\\\" alt=\\\"loginPage\\\" class=\\\"logo\\\" />\\r\\n        </div>\\r\\n        <h1 class=\\\"text-themecolor font-weight-bold text-center mt-1\\\">\\r\\n          PokeAPI Login\\r\\n        </h1>\\r\\n      </div>\\r\\n      <div class=\\\"card-body rounded-bottom\\\" style=\\\"padding-bottom: 0\\\">\\r\\n        <form class=\\\"form-horizontal form-material\\\" id=\\\"loginform\\\" [formGroup]=\\\"loginForm\\\" >\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"\\\">Email</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" required=\\\"\\\"\\r\\n                placeholder=\\\"Email\\\" id=\\\"email\\\" formControlName=\\\"email\\\"\\r\\n                name=\\\"email\\\" [ngClass]=\\\"{'has-error': (hasError && loginForm.controls['email'].errors) || (loginForm.controls['email'].errors && (loginForm.controls['email'].dirty ||\\r\\n                                                loginForm.controls['email'].touched)) }\\\" />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && loginForm.controls['email'].errors) || (loginForm.controls['email'].errors && (loginForm.controls['email'].dirty || loginForm.controls['email'].touched))\\\">\\r\\n                <span *ngIf=\\\"loginForm.controls['email'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n                <span *ngIf=\\\"loginForm.controls['email'].errors.requiredEmailFormat\\\">El campo debe ser un correo v√°lido</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <label for=\\\"\\\">{{ 'administration.authentication.login.label.psw' | translate }}</label>\\r\\n              <input class=\\\"form-control\\\" type=\\\"password\\\" required=\\\"\\\" (keyup.enter)=\\\"onLoggedIn()\\\"\\r\\n                placeholder=\\\"{{ 'administration.authentication.login.label.psw' | translate }}\\\"\\r\\n                id=\\\"password\\\" formControlName=\\\"psw\\\" name=\\\"psw\\\"\\r\\n                [ngClass]=\\\"{\\r\\n                  'has-error':\\r\\n                    (hasError && loginForm.controls['psw'].errors) || (loginForm.controls['psw'].errors &&\\r\\n                      (loginForm.controls['psw'].dirty ||\\r\\n                        loginForm.controls['psw'].touched))\\r\\n                }\\\"\\r\\n              />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && loginForm.controls['psw'].errors) ||\\r\\n                                (loginForm.controls['psw'].errors && (loginForm.controls['psw'].dirty ||\\r\\n                                    loginForm.controls['psw'].touched)) \\\">\\r\\n                <span *ngIf=\\\"loginForm.controls['psw'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-xs-12\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-yuxi btn-block text-capitalize\\\" (click)=\\\"onLoggedIn()\\\">\\r\\n              {{ 'administration.authentication.login.label.signIn' | translate }}\\r\\n            </button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-yuxi btn-block text-capitalize\\\" (click)=\\\"goRegister()\\\">\\r\\n              {{ 'administration.authentication.login.label.register' | translate }}\\r\\n            </button>\\r\\n          </div>\\r\\n          <div class=\\\"col-xs-12 m-t-10\\\"></div>\\r\\n\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"login-register\\\">\\r\\n  <div class=\\\"login-box\\\">\\r\\n    <div class=\\\"card login-box-shadow\\\">\\r\\n      <div class=\\\"card-header rounded-top\\\">\\r\\n        <div class=\\\"image-container text-center\\\">\\r\\n          <img src=\\\"https://teams.sourceseek.com/logos/profile/limage-4505-104-photo.jpg\\\" alt=\\\"loginPage\\\" class=\\\"logo\\\" />\\r\\n        </div>\\r\\n        <h1 class=\\\"text-themecolor font-weight-bold text-center mt-1\\\">\\r\\n          {{ 'administration.authentication.register.label.title' | translate }}\\r\\n        </h1>\\r\\n      </div>\\r\\n      <div class=\\\"card-body rounded-bottom\\\">\\r\\n        <form class=\\\"form-horizontal form-material\\\" id=\\\"registerForm\\\" [formGroup]=\\\"registerForm\\\" >\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"name\\\">{{ 'administration.authentication.register.label.name' | translate}}</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"{{ 'administration.authentication.register.label.name' | translate }}\\\" id=\\\"name\\\" formControlName=\\\"name\\\"\\r\\n                name=\\\"name\\\" [ngClass]=\\\"{'has-error': (hasError && registerForm.controls['name'].errors) || (registerForm.controls['name'].errors && (registerForm.controls['name'].dirty || registerForm.controls['name'].touched)) }\\\" />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && registerForm.controls['name'].errors) || (registerForm.controls['name'].errors && (registerForm.controls['name'].dirty || registerForm.controls['name'].touched))\\\">\\r\\n                <span *ngIf=\\\"registerForm.controls['name'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"email\\\">{{ 'general.email.label' | translate}}</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"{{ 'general.email.label' | translate }}\\\" id=\\\"email\\\" formControlName=\\\"email\\\"\\r\\n                email=\\\"email\\\" [ngClass]=\\\"{'has-error': (hasError && registerForm.controls['email'].errors) || (registerForm.controls['email'].errors && (registerForm.controls['email'].dirty || registerForm.controls['email'].touched)) }\\\"\\r\\n              />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && registerForm.controls['email'].errors) || (registerForm.controls['email'].errors && (registerForm.controls['email'].dirty || registerForm.controls['email'].touched))\\\">\\r\\n                <span *ngIf=\\\"registerForm.controls['email'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          \\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"psw\\\">{{ 'administration.authentication.register.label.psw' | translate}}</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"password\\\" placeholder=\\\"{{ 'administration.authentication.register.label.psw' | translate }}\\\" id=\\\"psw\\\" formControlName=\\\"psw\\\"\\r\\n                psw=\\\"psw\\\" [ngClass]=\\\"{'has-error': (hasError && registerForm.controls['psw'].errors) || (registerForm.controls['psw'].errors && (registerForm.controls['psw'].dirty || registerForm.controls['psw'].touched)) || invalidPasswordCharacters }\\\" />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && registerForm.controls['psw'].errors) || (registerForm.controls['psw'].errors && (registerForm.controls['psw'].dirty || registerForm.controls['psw'].touched))\\\">\\r\\n                <span *ngIf=\\\"registerForm.controls['psw'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n                \\r\\n              </div>\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\"invalidPasswordCharacters\\\">\\r\\n                <span>\\r\\n                  Debe contener al menos:  1 car√°cter num√©rico, 2 caracteres alfab√©ticos, 1 letra may√∫scula, 1 letra min√∫scula, 1 car√°cter especial y una longitud m√≠nima de 8 caracteres\\\",\\r\\n                </span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"psw\\\">Confirmaci√≥n de contrase√±a</label>\\r\\n            <div class=\\\"col-xs-12\\\">\\r\\n              <input class=\\\"form-control\\\" type=\\\"password\\\" placeholder=\\\"Confirmaci√≥n de contrase√±a\\\" id=\\\"confirmPsw\\\" formControlName=\\\"confirmPsw\\\"\\r\\n                confirmPsw=\\\"confirmPsw\\\" [ngClass]=\\\"{'has-error': (hasError && registerForm.controls['confirmPsw'].errors) || (registerForm.controls['confirmPsw'].errors && (registerForm.controls['confirmPsw'].dirty || registerForm.controls['confirmPsw'].touched)) }\\\" />\\r\\n              <div class=\\\"has-error\\\" *ngIf=\\\" (hasError && registerForm.controls['confirmPsw'].errors) || (registerForm.controls['confirmPsw'].errors && (registerForm.controls['confirmPsw'].dirty || registerForm.controls['confirmPsw'].touched))\\\">\\r\\n                <span *ngIf=\\\"registerForm.controls['confirmPsw'].errors.required\\\">{{ 'general.validations.requiredField' | translate}}</span>\\r\\n                <span *ngIf=\\\"registerForm.controls['confirmPsw'].errors.comparePswError\\\">Las contrase√±as no coinciden</span>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-xs-12\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-yuxi btn-block text-uppercase\\\" (click)=\\\"register()\\\">\\r\\n              {{ 'administration.authentication.register.button.register' | translate }}\\r\\n            </button>\\r\\n\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-yuxi btn-block text-uppercase\\\" (click)=\\\"goLogin()\\\">\\r\\n              Cancelar\\r\\n            </button>\\r\\n\\r\\n          </div> \\r\\n          \\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \".login-box-shadow {\\r\\n  border-radius: 10px 10px 10px 10px;\\r\\n  box-shadow: 0 30px 60px 0 rgba(0, 0, 0, 0.3);\\r\\n}\\r\\n.image-container {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQWRtaW5pc3RyYXRpb24vQ29tcG9uZW50cy9BdXRoZW50aWNhdGlvbi9Db21wb25lbnRzL0xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxrQ0FBa0M7RUFFbEMsNENBQTRDO0FBQzlDO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsdUJBQXVCO0FBQ3pCIiwiZmlsZSI6InNyYy9hcHAvQWRtaW5pc3RyYXRpb24vQ29tcG9uZW50cy9BdXRoZW50aWNhdGlvbi9Db21wb25lbnRzL0xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4tYm94LXNoYWRvdyB7XHJcbiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMHB4IDEwcHggMTBweCAxMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDEwcHggMTBweCAxMHB4IDEwcHg7XHJcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDMwcHggNjBweCAwIHJnYmEoMCwgMCwgMCwgMC4zKTtcclxuICBib3gtc2hhZG93OiAwIDMwcHggNjBweCAwIHJnYmEoMCwgMCwgMCwgMC4zKTtcclxufVxyXG4uaW1hZ2UtY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcbiJdfQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { AuthenticationFormService } from '../../Services/authentication.form.service';\r\nimport { User } from '../../../../../Commons/Entities/user';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  loginForm: FormGroup;\r\n  hasError = false;\r\n  showLoader = false;\r\n\r\n  constructor(\r\n    private authenticationFormService: AuthenticationFormService,\r\n    private routes: Router,) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.authenticationFormService.getLoginForm();\r\n  }\r\n\r\n\r\n  onLoggedIn() {\r\n    this.hasError = false;\r\n    this.showLoader = true;\r\n    if (this.loginForm.valid) {\r\n        //LocalStorage\r\n        let user = new User();\r\n        user.usr_email = this.loginForm.get(\"email\").value;\r\n        let userJson = JSON.stringify(user);\r\n        localStorage.setItem(\"user\", userJson);\r\n        \r\n        this.goDashboard();\r\n    } else {\r\n        this.hasError = true;\r\n        this.showLoader = false;\r\n      }\r\n  }\r\n\r\n  goDashboard() {\r\n    this.routes.navigate(['Home']);\r\n  }\r\n\r\n  goRegister() {\r\n    this.routes.navigate(['Register']);\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../../../../../Commons/Entities/user';\r\nimport { AuthenticationFormService } from '../../Services/authentication.form.service';\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html'\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n\r\n    registerForm: FormGroup;\r\n    hasError = false;\r\n    showLoader = false;\r\n    regex = (/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\\W).{8,18}$/); //1 may√∫scula, 1 minuscula, 1 n√∫mero, 1 caracter especial, entre 8 y 18 de longitud\r\n    invalidPasswordCharacters = false;\r\n    \r\n    constructor(private authenticationFormService: AuthenticationFormService,\r\n                private routes: Router) { }\r\n\r\n    ngOnInit() {\r\n        this.registerForm = this.authenticationFormService.getRegisterForm();\r\n\r\n        this.registerForm.get('confirmPsw').valueChanges.subscribe(value => {\r\n            this.comparePasswords();\r\n        });\r\n        this.registerForm.get('psw').valueChanges.subscribe(value => {\r\n            this.comparePasswords();\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.invalidPasswordCharacters = false;\r\n        this.registerForm.get('psw').valueChanges.subscribe(value => {\r\n            if (this.regex.test(value)) {\r\n                this.invalidPasswordCharacters = false;\r\n            }\r\n            else {\r\n                this.invalidPasswordCharacters = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    register() {\r\n        this.hasError = false;\r\n        if (this.registerForm.valid) {\r\n\r\n            //LocalStorage\r\n            let user = new User();\r\n            user.usr_userName = this.registerForm.get(\"name\").value;\r\n            user.usr_email = this.registerForm.get(\"email\").value;\r\n            let userJson = JSON.stringify(user);\r\n            localStorage.setItem(\"user\", userJson);\r\n            this.routes.navigate(['Home']);\r\n        }\r\n        else {\r\n            this.hasError = true;\r\n        }\r\n    }\r\n\r\n    goLogin() {\r\n        this.routes.navigate(['']);\r\n    }\r\n\r\n    comparePasswords() {\r\n        if (this.registerForm.get('confirmPsw').value === this.registerForm.get('psw').value) {\r\n            this.registerForm.get('confirmPsw').setErrors(null);\r\n        }\r\n        else {\r\n            this.registerForm.get('confirmPsw').setErrors({ 'comparePswError': true });\r\n        }\r\n    }\r\n\r\n}","import { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Injectable } from '@angular/core';\r\nimport { CustomValidators } from '../../../../Commons/Classes/customValidators';\r\n\r\n@Injectable()\r\nexport class AuthenticationFormService {\r\n  \r\n  constructor(private formBuilder: FormBuilder) { }\r\n\r\n  getLoginForm(): FormGroup {\r\n    return this.formBuilder.group({\r\n      email: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty, CustomValidators.EmailFormat]],\r\n      psw: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty]]\r\n    });\r\n  }\r\n\r\n  getRegisterForm(): FormGroup {\r\n    return this.formBuilder.group({\r\n      name: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty]],\r\n      email: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty, CustomValidators.EmailFormat]],\r\n      psw: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty]],\r\n      confirmPsw: [{ value: undefined, disabled: false }, [Validators.required, Validators.nullValidator, CustomValidators.IsNullorEmpty]]\r\n    });\r\n  }\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { LoginComponent } from './Components/Login/login.component';\r\nimport { AUTHENTICATION_ROUTES } from './authentication.routing';\r\nimport { AuthenticationFormService } from './Services/authentication.form.service';\r\nimport { RegisterComponent } from './Components/Register/register.component';\r\nimport { SharedModule } from '../../../Shared/shared.module';\r\nimport { CommonService } from '../../../Commons/Services/common.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AUTHENTICATION_ROUTES,\r\n    NgbModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ],\r\n  exports: [\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ],\r\n  providers: [\r\n    AuthenticationFormService,\r\n    CommonService\r\n  ]\r\n})\r\n\r\nexport class AuthenticationModule { }\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './Components/Login/login.component';\r\nimport { RegisterComponent } from './Components/Register/register.component';\r\n\r\nconst AuthenticationRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  },\r\n  {\r\n    path: 'Register',\r\n    component: RegisterComponent\r\n  }\r\n];\r\n\r\nexport const AUTHENTICATION_ROUTES = RouterModule.forChild(AuthenticationRoutes);\r\n","import { AbstractControl, ValidatorFn, ValidationErrors } from '@angular/forms';\r\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\r\nimport { isNumber } from 'util';\r\n\r\nexport class CustomValidators {\r\n\r\n  static IsNullorEmpty(control: AbstractControl) {\r\n    if (\r\n      control.value === null ||\r\n      control.value === undefined ||\r\n      control.value === 'undefined' ||\r\n      control.value === ''\r\n    ) {\r\n      // control.setValue(undefined);\r\n      return { required: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static EmailFormat(control: AbstractControl) {\r\n    if (control.value === null || control.value === undefined || control.value === '') {\r\n      return null;\r\n    }\r\n    if (!(/(([^<>()[\\]\\.,;:\\s@\\']+(\\.[^<>()[\\]\\.,;:\\s@\\']+)*)|(\\'.+\\'))@(([^<>()[\\]\\.,;:\\s@\\']+\\.)+[^<>()[\\]\\.,;:\\s@\\']{2,})$/\r\n      .test(control.value))) {\r\n      return { requiredEmailFormat: true };\r\n    }\r\n  }\r\n\r\n}\r\n","export class User  {\r\n\r\n  public usr_userName: string;\r\n  public usr_email: string;\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"0-es5.js"}